out <- ode(y = init.state, func = amr, times = seq(0, 1000), parms = thetaparm)
View(out)
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
zeta*Sa*(1-alpha) - zeta*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + zeta*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + zeta*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0)
thetaparm <- c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAA = 0.01, betaAH = 0.00001, betaHH = 0.00001,
betaHA = 0.01, phi = 0.01, kappa = 0.01, alpha = 0.01, zeta = 0.01, tau = 0.01)
outruns <- runsteady(y = init.state, func = amr, times = c(0, Inf), parms = thetaparm)
outdes <- ode(y = init.state, func = amr, times = seq(0, 1000), parms = thetaparm)
View(outruns)
View(outdes)
read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_broil <- read.csv("Amp_Broil_Comb.csv")
dataamp_hum <- read.csv("Hum_Broil.csv")
#Cleaning Data - Animals
dataamp_broil[,(2+4):(5+4)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_broil[,(2+8):(5+8)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_broil[,2:5][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_broil <- dataamp_broil[!(is.na(dataamp_broil$N_2014) & is.na(dataamp_broil$N_2016) & is.na(dataamp_broil$N_2017) &
is.na(dataamp_broil$N_2018)),]
broil_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_broil), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_broil)[10:13] <- broil_yrs
#Create dataset where each row is a different observation.
melt_amp_broil <- melt(dataamp_broil, id.vars = "Country", measure.vars = broil_yrs)
melt_amp_broil$usage <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("scale_ampusage_2014", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018"))[,3]
melt_amp_broil$N <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016",
"N_2017", "N_2018"))[,3]
melt_amp_broil$IsolPos <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_amp_broil)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_broil$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = broil_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_broil$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$Resistance),]
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_broil$lower_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[1]]))
melt_amp_broil$upper_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_broil) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Tet", "Upper_Tet")
melt_amp_broil$Usage <- melt_amp_broil$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_broil, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_broil$Usage)
avg_hum_res <- mean(melt_amp_broil$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_2/Models/Github/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_broil <- read.csv("Amp_Broil_Comb.csv")
dataamp_hum <- read.csv("Hum_Broil.csv")
#Cleaning Data - Animals
dataamp_broil[,(2+4):(5+4)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_broil[,(2+8):(5+8)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_broil[,2:5][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_broil <- dataamp_broil[!(is.na(dataamp_broil$N_2014) & is.na(dataamp_broil$N_2016) & is.na(dataamp_broil$N_2017) &
is.na(dataamp_broil$N_2018)),]
broil_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_broil), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_broil)[10:13] <- broil_yrs
#Create dataset where each row is a different observation.
melt_amp_broil <- melt(dataamp_broil, id.vars = "Country", measure.vars = broil_yrs)
melt_amp_broil$usage <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("scale_ampusage_2014", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018"))[,3]
melt_amp_broil$N <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016",
"N_2017", "N_2018"))[,3]
melt_amp_broil$IsolPos <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_amp_broil)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_broil$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = broil_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_broil$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$Resistance),]
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_broil$lower_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[1]]))
melt_amp_broil$upper_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_broil) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Tet", "Upper_Tet")
melt_amp_broil$Usage <- melt_amp_broil$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_broil, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_broil$Usage)
avg_hum_res <- mean(melt_amp_broil$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
# Test --------------------------------------------------------------------
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")
map_estimate
map_estimate(test)
test
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")[3:8,]
map_estimate(test)
test
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")[,3:8]
map_estimate(test)
MAP$MAP_Estimate[MAP$Parameter = "kappa"]
MAP$MAP_Estimate[MAP$Parameter == "kappa"]
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")[,3:8]
MAP <- map_estimate(test)
MAP$MAP_Estimate[MAP$Parameter == "kappa"]
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_2/Models/Github/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_broil <- read.csv("Amp_Broil_Comb.csv")
dataamp_hum <- read.csv("Hum_Broil.csv")
#Cleaning Data - Animals
dataamp_broil[,(2+4):(5+4)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_broil[,(2+8):(5+8)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_broil[,2:5][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_broil <- dataamp_broil[!(is.na(dataamp_broil$N_2014) & is.na(dataamp_broil$N_2016) & is.na(dataamp_broil$N_2017) &
is.na(dataamp_broil$N_2018)),]
broil_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_broil), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_broil)[10:13] <- broil_yrs
#Create dataset where each row is a different observation.
melt_amp_broil <- melt(dataamp_broil, id.vars = "Country", measure.vars = broil_yrs)
melt_amp_broil$usage <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("scale_ampusage_2014", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018"))[,3]
melt_amp_broil$N <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016",
"N_2017", "N_2018"))[,3]
melt_amp_broil$IsolPos <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_amp_broil)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_broil$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = broil_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_broil$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$Resistance),]
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_broil$lower_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[1]]))
melt_amp_broil$upper_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_broil) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Tet", "Upper_Tet")
melt_amp_broil$Usage <- melt_amp_broil$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_broil, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_broil$Usage)
avg_hum_res <- mean(melt_amp_broil$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
# Test --------------------------------------------------------------------
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")[,3:8]
MAP <- map_estimate(test)
MAP$MAP_Estimate[MAP$Parameter == "kappa"]
computeDistanceABC_ALEX(sum.stats = list(summarystatprev),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
tau_range = melt_amp_broil$Usage,
thetaparm = c(ra = 0, rh = (5.5^-1), ua = 42^-1, uh = 28835^-1, betaAA = MAP$MAP_Estimate[MAP$Parameter == "betaAA"], betaAH = 0.00001, betaHH = 0.00001,
betaHA = MAP$MAP_Estimate[MAP$Parameter == "betaHA"], phi = MAP$MAP_Estimate[MAP$Parameter == "phi"], kappa = MAP$MAP_Estimate[MAP$Parameter == "kappa"],
alpha = MAP$MAP_Estimate[MAP$Parameter == "alpha"], zeta = MAP$MAP_Estimate[MAP$Parameter == "zeta"]),
init.state =c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
data = melt_amp_broil)
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_2/Models/Github/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_broil <- read.csv("Amp_Broil_Comb.csv")
dataamp_hum <- read.csv("Hum_Broil.csv")
#Cleaning Data - Animals
dataamp_broil[,(2+4):(5+4)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_broil[,(2+8):(5+8)][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_broil[,2:5][dataamp_broil[,2:5] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_broil <- dataamp_broil[!(is.na(dataamp_broil$N_2014) & is.na(dataamp_broil$N_2016) & is.na(dataamp_broil$N_2017) &
is.na(dataamp_broil$N_2018)),]
broil_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_broil), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_broil)[10:13] <- broil_yrs
#Create dataset where each row is a different observation.
melt_amp_broil <- melt(dataamp_broil, id.vars = "Country", measure.vars = broil_yrs)
melt_amp_broil$usage <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("scale_ampusage_2014", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018"))[,3]
melt_amp_broil$N <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016",
"N_2017", "N_2018"))[,3]
melt_amp_broil$IsolPos <- melt(dataamp_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_amp_broil)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_broil$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = broil_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_broil$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$Resistance),]
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_broil$lower_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[1]]))
melt_amp_broil$upper_tet <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_broil) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Tet", "Upper_Tet")
melt_amp_broil$Usage <- melt_amp_broil$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_broil, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_broil$Usage)
avg_hum_res <- mean(melt_amp_broil$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
# Test --------------------------------------------------------------------
test <- read.delim("C:/Users/amorg/Downloads/alex_ab_food_AmpBroil.52")[,3:8]
MAP <- map_estimate(test)
MAP$MAP_Estimate[MAP$Parameter == "kappa"]
computeDistanceABC_ALEX(sum.stats = summarystatprev,
distanceABC = sum_square_diff_dist,
fitmodel = amr,
tau_range = melt_amp_broil$Usage,
thetaparm = c(ra = 0, rh = (5.5^-1), ua = 42^-1, uh = 28835^-1, betaAA = MAP$MAP_Estimate[MAP$Parameter == "betaAA"], betaAH = 0.00001, betaHH = 0.00001,
betaHA = MAP$MAP_Estimate[MAP$Parameter == "betaHA"], phi = MAP$MAP_Estimate[MAP$Parameter == "phi"], kappa = MAP$MAP_Estimate[MAP$Parameter == "kappa"],
alpha = MAP$MAP_Estimate[MAP$Parameter == "alpha"], zeta = MAP$MAP_Estimate[MAP$Parameter == "zeta"]),
init.state =c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
data = melt_amp_broil)
tau_range <- melt_amp_broil$Usage
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol=4))
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0)
for (i in 1:length(tau_range)) {
parms2 =  c(ra = 0, rh = (5.5^-1), ua = 42^-1, uh = 28835^-1,
betaAA = test_MAP$MAP_Estimate[test_MAP$Parameter == "betaAA"],
betaAH = 0.00001, betaHH = 0.00001,
betaHA = test_MAP$MAP_Estimate[test_MAP$Parameter == "betaHA"],
phi = test_MAP$MAP_Estimate[test_MAP$Parameter == "phi"],
kappa = test_MAP$MAP_Estimate[test_MAP$Parameter == "kappa"],
alpha = test_MAP$MAP_Estimate[test_MAP$Parameter == "alpha"],
zeta = test_MAP$MAP_Estimate[test_MAP$Parameter == "zeta"])
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = amr, times = c(0, Inf),
parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
test_MAP <- map_estimate(test)
tau_range <- melt_amp_broil$Usage
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol=4))
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0)
for (i in 1:length(tau_range)) {
parms2 =  c(ra = 0, rh = (5.5^-1), ua = 42^-1, uh = 28835^-1,
betaAA = test_MAP$MAP_Estimate[test_MAP$Parameter == "betaAA"],
betaAH = 0.00001, betaHH = 0.00001,
betaHA = test_MAP$MAP_Estimate[test_MAP$Parameter == "betaHA"],
phi = test_MAP$MAP_Estimate[test_MAP$Parameter == "phi"],
kappa = test_MAP$MAP_Estimate[test_MAP$Parameter == "kappa"],
alpha = test_MAP$MAP_Estimate[test_MAP$Parameter == "alpha"],
zeta = test_MAP$MAP_Estimate[test_MAP$Parameter == "zeta"])
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = amr, times = c(0, Inf),
parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
# Plot Tau range ----------------------------------------------------------
ggplot(melt_amp_broil, aes(x = Usage, y= ResPropAnim, color = Country))  + geom_point() + theme_bw() +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Pig Ampicillin Sales (g/PCU)", y = "Ampicillin-Resistant Pig Carriage") +
geom_line(data = tauoutput, aes(x = tau, y= ResPropAnim), col = "red", size = 1.1) +
theme(legend.text=element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(1,1,1,1), "cm"))
ggplot(tauoutput, aes(x = tau, y= IncH)) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Pig Ampicillin Sales (g/PCU)", y = "Daily Human Incidence") +
geom_line(col = "red", size = 1.1) + geom_vline(xintercept = avg_EU_usage, lty = 2, col = "red") +
geom_hline(yintercept = 0.593, lty = 2, col = "red") +
theme(legend.text=element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(1,1,1,1), "cm"))
ggplot(tauoutput, aes(x = tau, y= ResPropHum)) +
scale_x_continuous(expand = c(0, 0)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Pig Ampicillin Sales (g/PCU)", y = "Proportion of Human Resistance") +
geom_line(col = "red", size = 1.1) + geom_vline(xintercept = avg_EU_usage, lty = 2, col = "red") +
geom_hline(yintercept = avg_hum_res, lty = 2, col = "red") +
theme(legend.text=element_text(size=12), axis.text=element_text(size=12),
axis.title.y=element_text(size=12), axis.title.x= element_text(size=12), plot.margin = unit(c(1,1,1,1), "cm"))
