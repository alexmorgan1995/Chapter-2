epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
test
?sapply
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_2/Models/Github/Chapter-2/NewFits_041021/data")
# Model FUnctions ---------------------------------------------------------
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_pigs <- read.csv("Amp_FatPigs_Comb.csv")
dataamp_hum <- read.csv("Hum_FatPigs.csv")
#Cleaning Data - Animals
dataamp_pigs[,(2+5):(6+5)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_pigs[,(2+10):(6+10)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_pigs[,2:6][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_pigs <- dataamp_pigs[!(is.na(dataamp_pigs$N_2015) & is.na(dataamp_pigs$N_2016) & is.na(dataamp_pigs$N_2017) &
is.na(dataamp_pigs$N_2018) & is.na(dataamp_pigs$N_2019)),]
pig_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_pigs), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_pigs)[12:16] <- pig_yrs
#Create dataset where each row is a different observation.
melt_amp_pigs <- melt(dataamp_pigs, id.vars = "Country", measure.vars = pig_yrs)
melt_amp_pigs$usage <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_pigs$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$Resistance),]
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_pigs$Usage)
avg_hum_res <- mean(melt_amp_pigs$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
prior.non.zero<-function(par, lm.low, lm.upp){
prod(sapply(1:6, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(data.obs, model.obs) {
sumsquare <- (data.obs$ResPropAnim - model.obs$ResPropAnim)^2
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
parms2 = thetaparm
for (i in 1:length(tau_range)) {
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
####
singlerun <- function(x, G, init.state, distanceABC, fitmodel, thetaparm, fit_parms, epsilon, tau_range, data, lm.low, lm.upp) {
i <- 0
lm.low = lm.low
lm.upp = lm.upp
while(i <= 1) {
if(G == 1) {
d_betaAA <- runif(1, min = 0, max = 0.25)
d_phi <- runif(1, min = 0, max = 0.1)
d_kappa <- runif(1, min = 0, max = 2)
d_alpha <- rbeta(1, 1.5, 8.5)
d_zeta <- runif(1, 0, 1)
d_betaHA <- runif(1, 0, 0.0005)
}
if(prior.non.zero(c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA), lm.low, lm.upp)) {
thetaparm[fit_parms] <- c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA)
dist <- computeDistanceABC_ALEX(distanceABC, fitmodel, tau_range, thetaparm, init.state, data)
if((dist[1] <= epsilon[["dist"]][G]) && (dist[2] <= epsilon[["food"]][G]) && (dist[3] <= epsilon[["AMR"]][G]) && (!is.na(dist))) {
# Store results
# Calculate weights
if(G==1){
1
}
}
}
i <- i +1
}
return(list(dist, thetaparm[fit_parms]))
}
#Parms
epsilon <- list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05))
test <- sapply(1:2,
singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
test
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("C:/Users/amorg/Documents/PhD/Chapter_2/Models/Github/Chapter-2/NewFits_041021/data")
# Model FUnctions ---------------------------------------------------------
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_pigs <- read.csv("Amp_FatPigs_Comb.csv")
dataamp_hum <- read.csv("Hum_FatPigs.csv")
#Cleaning Data - Animals
dataamp_pigs[,(2+5):(6+5)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_pigs[,(2+10):(6+10)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_pigs[,2:6][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_pigs <- dataamp_pigs[!(is.na(dataamp_pigs$N_2015) & is.na(dataamp_pigs$N_2016) & is.na(dataamp_pigs$N_2017) &
is.na(dataamp_pigs$N_2018) & is.na(dataamp_pigs$N_2019)),]
pig_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_pigs), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_pigs)[12:16] <- pig_yrs
#Create dataset where each row is a different observation.
melt_amp_pigs <- melt(dataamp_pigs, id.vars = "Country", measure.vars = pig_yrs)
melt_amp_pigs$usage <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_pigs$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$Resistance),]
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_pigs$Usage)
avg_hum_res <- mean(melt_amp_pigs$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
prior.non.zero<-function(par, lm.low, lm.upp){
prod(sapply(1:6, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(data.obs, model.obs) {
sumsquare <- (data.obs$ResPropAnim - model.obs$ResPropAnim)^2
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <- data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
parms2 = thetaparm
for (i in 1:length(tau_range)) {
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
####
singlerun <- function(x, G, init.state, distanceABC, fitmodel, thetaparm, fit_parms, epsilon, tau_range, data, lm.low, lm.upp) {
i <- 0
lm.low = lm.low
lm.upp = lm.upp
while(i <= 1) {
if(G == 1) {
d_betaAA <- runif(1, min = 0, max = 0.25)
d_phi <- runif(1, min = 0, max = 0.1)
d_kappa <- runif(1, min = 0, max = 2)
d_alpha <- rbeta(1, 1.5, 8.5)
d_zeta <- runif(1, 0, 1)
d_betaHA <- runif(1, 0, 0.0005)
}
if(prior.non.zero(c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA), lm.low, lm.upp)) {
thetaparm[fit_parms] <- c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA)
dist <- computeDistanceABC_ALEX(distanceABC, fitmodel, tau_range, thetaparm, init.state, data)
if((dist[1] <= epsilon[["dist"]][G]) && (dist[2] <= epsilon[["food"]][G]) && (dist[3] <= epsilon[["AMR"]][G]) && (!is.na(dist))) {
# Store results
# Calculate weights
if(G==1){
1
}
}
}
i <- i +1
}
return(list(dist, thetaparm[fit_parms]))
}
#Parms
epsilon <- list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05))
test <- lapply(1:2,
singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
test
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
test <- parLapply(cl, 1:100, )
system.time(test <- parLapply(cl, 1:10, singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
stopCluster(cl)
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, amr, computeDistanceABC_ALEX, prior.non.zero, sum_square_diff_dist)
test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
stopCluster(cl)
ls()
?clusterExport
clusterExport(cl, list(amr, computeDistanceABC_ALEX, prior.non.zero, sum_square_diff_dist), envir = .GlobalEnv)
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, list(amr, computeDistanceABC_ALEX, prior.non.zero, sum_square_diff_dist), envir = .GlobalEnv)
clusterExport(cl, list(amr, computeDistanceABC_ALEX, prior.non.zero, sum_square_diff_dist))
clusterExport(cl, varlist = c(amr, computeDistanceABC_ALEX, prior.non.zero, sum_square_diff_dist))
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist"))
cl
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist"))
test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
stopCluster(cl)
stopCluster(cl)
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "avg_EU_usage", "avg_hum_res"))
test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005))
stopCluster(cl)
test
warnings()
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "avg_EU_usage", "avg_hum_res"))
system.time(test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
stopCluster(cl)
system.time(test <- parLapply(cl, 1:100, singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
system.time(test <- lapply(1:100, singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = epsilon,
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "avg_EU_usage", "avg_hum_res"))
system.time(test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
system.time(test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
stopCluster(cl)
test
sapply(test, "[[", 2)
data.frame(sapply(test, "[[", 2))
do.call(rbind, sapply(test, "[[", 2))
do.call(rbind, lapply(test, "[[", 2))
test <- do.call(rbind, lapply(test, "[[", 2))
test <- as.dataframe(do.call(rbind, lapply(test, "[[", 2)))
test <- as.data.frame(do.call(rbind, lapply(test, "[[", 2)))
test <- data.frame(do.call(rbind, lapply(test, "[[", 2)))
do.call(rbind, lapply(test, "[[", 2))
do.call(rbind, lapply(test, "[[", 2)
data.frame(do.call(rbind, lapply(test, "[[", 2)))
test <- data.frame(do.call(rbind, lapply(test, "[[", 2)))
do.call(rbind, lapply(test, "[[", 2))
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "avg_EU_usage", "avg_hum_res"))
system.time(test <- parLapply(cl, 1:100,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
stopCluster(cl)
test_dat <- data.frame(do.call(rbind, lapply(test, "[[", 2)))
test_dat
View(test_dat)
plot(density(test_dat$betaAA))
cl <- makeCluster(14,type="SOCK")
clusterEvalQ(cl, {library("rootSolve")})
clusterExport(cl, varlist = c("amr", "computeDistanceABC_ALEX", "prior.non.zero", "sum_square_diff_dist",
"melt_amp_pigs", "avg_EU_usage", "avg_hum_res"))
system.time(test <- parLapply(cl, 1:1000,  singlerun,
G = 1,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
distanceABC = sum_square_diff_dist,
fitmodel = amr,
thetaparm = c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001),
fit_parms = c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA"),
epsilon = list("dist" = c(3.5, 3, 2.5, 2, 1.7, 1.5, 1.3, 1.2, 1.1, 1),
"food" = c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05),
"AMR" = c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08,
avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)),
tau_range = melt_amp_pigs$Usage,
data = melt_amp_pigs,
lm.low = c(0, 0, 0, 0, 0, 0),
lm.upp = c(0.25, 0.1, 2, 1, 1, 0.0005)))
stopCluster(cl)
test_dat <- data.frame(do.call(rbind, lapply(test, "[[", 2)))
plot(density(test_dat$betaAA))
test
