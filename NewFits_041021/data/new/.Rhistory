broil_tet <- ggplot(broil_rel, aes(x = usage_tet, y = propres_tet)) + geom_point() + theme_bw() +
geom_line(aes(y = predict(broil_stat_tet, broil_rel), x = usage_tet), colour = "red", size = 1.2) +
geom_errorbar(aes(ymin=lower_tet, ymax=upper_tet),  size=0.5, width = 0)+
labs(title = "Tetracycline Usage in Broilers: 2014-2018", x = "Tetracycline Usage", y = "Proportion Broilers Resistant")
# Stat Testing - FATTENING PIGS -------------------------------------------------------------
pig_rel <- data.frame("Country" = usage_pigs$Country,
"usage_amp" = rowMeans(usage_pigs[,27:31], na.rm = TRUE),
"usage_tet" = rowMeans(usage_pigs[,32:36], na.rm = TRUE),
"N" = rowSums(amp_pigs[,2:6], na.rm = TRUE),
"isolpos_amp" = rowSums(amp_pigs[,7:11], na.rm = TRUE),
"isolpos_tet" = rowSums(tet_pigs[,7:11], na.rm = TRUE))
pig_rel$propres_amp <- pig_rel$isolpos_amp /  pig_rel$N
pig_rel$propres_tet <- pig_rel$isolpos_tet /  pig_rel$N
pig_rel$propres_amp_trans <- ((pig_rel$propres_amp*(nrow(pig_rel)-1)) + 0.5)/nrow(pig_rel)
pig_rel$propres_tet_trans <- ((pig_rel$propres_tet*(nrow(pig_rel)-1)) + 0.5)/nrow(pig_rel)
pig_rel$lower_amp <- unlist(lapply(1:nrow(pig_rel), function(i) prop.test(pig_rel$isolpos_amp[i],pig_rel$N[i])[[6]][[1]]))
pig_rel$upper_amp <- unlist(lapply(1:nrow(pig_rel), function(i) prop.test(pig_rel$isolpos_amp[i],pig_rel$N[i])[[6]][[2]]))
pig_rel$lower_tet <- unlist(lapply(1:nrow(pig_rel), function(i) prop.test(pig_rel$isolpos_tet[i],pig_rel$N[i])[[6]][[1]]))
pig_rel$upper_tet <- unlist(lapply(1:nrow(pig_rel), function(i) prop.test(pig_rel$isolpos_tet[i],pig_rel$N[i])[[6]][[2]]))
#Stat Test
pig_stat_amp <- betareg(propres_amp_trans ~ usage_amp, pig_rel)
pig_stat_tet <- betareg(propres_tet_trans ~ usage_tet, data = pig_rel)
summary(pig_stat_amp)
summary(pig_stat_tet)
pig_amp <- ggplot(pig_rel, aes(x = usage_amp, y = propres_amp)) + geom_point() + theme_bw() +
geom_line(aes(y = predict(pig_stat_amp, pig_rel), x = usage_amp), colour = "red", size = 1.2) +
scale_y_continuous(limits = c(0,1)) +
geom_errorbar(aes(ymin=lower_amp, ymax=upper_amp),  size=0.5, width = 0) +
labs(title = "Ampicillin Usage in Fat Pigs: 2015-2019", x = "Ampicillin Usage", y = "Proportion Pigs Resistant")
pig_tet <- ggplot(pig_rel, aes(x = usage_tet, y = propres_tet)) + geom_point() + theme_bw() +
geom_line(aes(y = predict(pig_stat_tet, pig_rel), x = usage_tet), colour = "red", size = 1.2) +
scale_y_continuous(limits = c(0,1)) +
geom_errorbar(aes(ymin=lower_tet, ymax=upper_tet),  size=0.5, width = 0) +
labs(title = "Tetracycline Usage in Fat Pigs: 2015-2019", x = "Tetracycline Usage", y = "Proportion Pigs Resistant")
# Comb Plots --------------------------------------------------------------
broilers <- ggarrange(broil_amp, broil_tet, ncol = 2, nrow = 1)
pigs <- ggarrange(pig_amp, pig_tet, ncol = 2, nrow = 1)
ggsave(broilers, filename = "broil_comb_stat.png", dpi = 300, type = "cairo", width = 14, height = 5, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Figures/comb_data")
ggsave(pigs, filename = "pigs_comb_stat.png", dpi = 300, type = "cairo", width = 14, height = 5, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Figures/comb_data")
library(reshape2); library(ggplot2); library(ggpubr); library(betareg)
rm(list=ls())
# Functions ---------------------------------------------------------------
sum_square_diff_dist <- function(data.obs, model.obs) {
sumsquare <- abs((data.obs - model.obs)^2)
return(sum(sumsquare))
}
# Import and Clean Data - Fattening Pigs (Ampicillin and Tetracycline) -----------
# Ampicillin Resistance
amp_pigs <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/Amp_FatPigs_Years.csv")
amp_pigs[,(2+5):(6+5)][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs[,(2+10):(6+10)][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs[,2:6][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs <- amp_pigs[!(is.na(amp_pigs$N_2015) & is.na(amp_pigs$N_2016) & is.na(amp_pigs$N_2017) &
is.na(amp_pigs$N_2018) & is.na(amp_pigs$N_2019)),]
colnames(amp_pigs)[12:16] <- as.character(seq(2015, 2019))
#Check that we have the same countries for tetracycline and ampicillin usage
amp_pigs$Country %in% amp_pigs$Country
#Broiler Usage
usage_pigs <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/pig_usage_years.csv")
usage_pigs <- usage_pigs[usage_pigs$Country %in% intersect(usage_pigs$Country, amp_pigs$Country),]
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
melt_amp_pigs <- melt(amp_pigs, id.vars = "Country", measure.vars = c("2015", "2016", "2017", "2018", "2019"))
melt_amp_pigs$usage <- melt(usage_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(amp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(amp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$N),]
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#NORMAL
stat_amp_pigs <- lm(Resistance ~ usage, melt_amp_pigs); summary(stat_amp_pigs)
stat_amp_pigs
predict(stat_amp_pigs, melt_amp_pigs)
melt_amp_pigs$Resistance
data.frame("model_pred" = predict(stat_amp_pigs, melt_amp_pigs),
"data" = melt_amp_pigs$Resistance)
ss_data_amppigs_nonaggre[!is.na(ss_data_amppigs_nonaggre$model_pred),]
stat_amp_pigs <- lm(Resistance ~ usage, melt_amp_pigs); summary(stat_amp_pigs)
ss_data_amppigs_nonaggre <- data.frame("model_pred" = predict(stat_amp_pigs, melt_amp_pigs),
"data" = melt_amp_pigs$Resistance)
ss_data_amppigs_nonaggre <- ss_data_amppigs_nonaggre[!is.na(ss_data_amppigs_nonaggre$model_pred),]
ss_data_amppigs_nonaggre
ss_data_amppigs_nonaggre$model_pred - ss_data_amppigs_nonaggre$data
abs(ss_data_amppigs_nonaggre$model_pred - ss_data_amppigs_nonaggre$data)
sum(abs(ss_data_amppigs_nonaggre$model_pred - ss_data_amppigs_nonaggre$data))
sum(abs((ss_data_amppigs_nonaggre$model_pred - ss_data_amppigs_nonaggre$data)^2))
(ss_data_amppigs_nonaggre$model_pred - ss_data_amppigs_nonaggre$data)^2
post_dist_names <- grep("ABC_post_ampbroil_",
list.files("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data"), value = TRUE)
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- map_estimate(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:6])
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,7)]
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = colnames(post_dist)[-7][i]) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),axis.text=element_text(size=14),
axis.title.y=element_text(size=14),axis.title.x= element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
return(p)
})
}
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_pigs <- read.csv("Amp_FatPigs_Comb.csv")
dataamp_hum <- read.csv("Hum_FatPigs.csv")
#Cleaning Data - Animals
dataamp_pigs[,(2+5):(6+5)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_pigs[,(2+10):(6+10)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_pigs[,2:6][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_pigs <- dataamp_pigs[!(is.na(dataamp_pigs$N_2015) & is.na(dataamp_pigs$N_2016) & is.na(dataamp_pigs$N_2017) &
is.na(dataamp_pigs$N_2018) & is.na(dataamp_pigs$N_2019)),]
pig_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_pigs), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_pigs)[12:16] <- pig_yrs
#Create dataset where each row is a different observation.
melt_amp_pigs <- melt(dataamp_pigs, id.vars = "Country", measure.vars = pig_yrs)
melt_amp_pigs$usage <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_pigs$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$Resistance),]
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_pigs$Usage)
avg_hum_res <- mean(melt_amp_pigs$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
#Where G is the number of generations
#Function to 100% make sure the sampled particles for all parameters are non zero
prior.non.zero<-function(par){
prod(sapply(1:6, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Wrapper function for all of the functions to output the distance measures and the diagnostics
#Saving of the accepted particles in each generation done within the function
ABC_algorithm <- function(N, G, sum.stats, distanceABC, fitmodel, tau_range, init.state, data)  {
N_ITER_list <- list()
fit_parms <- c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA")
thetaparm <- c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001)
for(g in 1:G) {
i <- 1
dist_data <- data.frame(matrix(nrow = 1000, ncol = 3))
N_ITER <- 1
while(i <= N) {
N_ITER <- N_ITER + 1
if(g==1) {
d_betaAA <- runif(1, min = 0, max = 1)
d_phi <- runif(1, min = 0, max = 1)
d_kappa <- runif(1, min = 0, max = 100)
d_alpha <- rbeta(1, 1.5, 8.5)
d_zeta <- runif(1, 0, 5)
d_betaHA <- runif(1, 0, 0.00075)
} else{
p <- sample(seq(1,N),1,prob= w.old) # check w.old here
par <- rtmvnorm(1,mean=res.old[p,], sigma=sigma, lower=lm.low, upper=lm.upp)
d_betaAA<-par[1]
d_phi<-par[2]
d_kappa<-par[3]
d_alpha<-par[4]
d_zeta <- par[5]
d_betaHA <-par[6]
}
if(prior.non.zero(c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA))) {
m <- 0
thetaparm <- c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAA = d_betaAA, betaAH = 0.00001, betaHH = 0.00001,
betaHA = d_betaHA, phi = d_phi, kappa = d_kappa, alpha = d_alpha, zeta = d_zeta)
dist <- computeDistanceABC_ALEX(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data)
print(dist)
if((dist[1] <= epsilon_dist[g]) && (dist[2] <= epsilon_food[g]) && (dist[3] <= epsilon_AMR[g]) && (!is.na(dist))) {
# Store results
res.new[i,]<-c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA)
dist_data[i,] <- dist
# Calculate weights
if(g==1){
w.new[i] <- 1
} else {
w1<-prod(c(sapply(c(1:3,5:6), function(b) dunif(res.new[i,b], min=lm.low[b], max=lm.upp[b])),
dbeta(res.new[i,4], 1.5, 8.5)))
w2<-sum(sapply(1:N, function(a) w.old[a]* dtmvnorm(res.new[i,], mean=res.old[a,], sigma=sigma, lower=lm.low, upper=lm.upp)))
w.new[i] <- w1/w2
}
# Update counter
print(paste0('Generation: ', g, ", particle: ", i,", weights: ", w.new[i]))
print(dist)
i <- i+1
}
}
}
N_ITER_list[[g]] <- list(N_ITER, dist_data)
sigma <- cov(res.new)
res.old <- res.new
print(res.old)
w.old <- w.new/sum(w.new)
colnames(res.new) <- c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA")
write.csv(res.new, file = paste("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/new/ABC_post_amppigs_",g,".csv",sep=""), row.names=FALSE)
}
return(N_ITER_list)
}
N <- 1000 #(ACCEPTED PARTICLES PER GENERATION)
lm.low <- c(0, 0, 0, 0, 0, 0)
lm.upp <- c(1, 1, 100, 1, 5, 0.00075) #Upper and lower bounds for the priors - for the multivariate normal dist pert kernel
# Empty matrices to store results (6 model parameters)
res.old<-matrix(ncol=6,nrow=N)
res.new<-matrix(ncol=6,nrow=N)
# Empty vectors to store weights
w.old<-matrix(ncol=1,nrow=N)
w.new<-matrix(ncol=1,nrow=N)
#Thresholds
epsilon_dist <- c(4, 3.5, 3, 2.5, 2, 1.8, 1.6, 1.55, 1.5, 1.475)
epsilon_food <- c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05)
epsilon_AMR <- c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08, avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)
#Run the model
start_time <- Sys.time()
dist_save <- ABC_algorithm(N = 1000,
G = 10,
sum.stats = summarystatprev,
distanceABC = sum_square_diff_dist,
fitmodel = amr,
tau_range = melt_amp_pigs$Usage,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
data = melt_amp_pigs)
end_time <- Sys.time(); end_time - start_time
saveRDS(dist_save, file = "dist_amppigs_list.rds")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr"); library("rootSolve")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data")
#Model
amr <- function(t, y, parms) {
with(as.list(c(y, parms)), {
dSa = ua + ra*(Isa + Ira) + kappa*tau*Isa - (betaAA*Isa*Sa) - (betaAH*Ish*Sa) - (1-alpha)*(betaAH*Irh*Sa) - (1-alpha)*(betaAA*Ira*Sa) - ua*Sa -
(0.5*zeta)*Sa*(1-alpha) - (0.5*zeta)*Sa
dIsa = betaAA*Isa*Sa + betaAH*Ish*Sa + phi*Ira - kappa*tau*Isa - tau*Isa - ra*Isa - ua*Isa + (0.5*zeta)*Sa
dIra = (1-alpha)*betaAH*Irh*Sa + (1-alpha)*betaAA*Ira*Sa + tau*Isa - phi*Ira - ra*Ira - ua*Ira + (0.5*zeta)*Sa*(1-alpha)
dSh = uh + rh*(Ish+Irh) - (betaHH*Ish*Sh) - (1-alpha)*(betaHH*Irh*Sh) - (betaHA*Isa*Sh) - (1-alpha)*(betaHA*Ira*Sh) - uh*Sh
dIsh = betaHH*Ish*Sh + betaHA*Isa*Sh - rh*Ish - uh*Ish
dIrh = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh) - rh*Irh - uh*Irh
CumS = betaHH*Ish*Sh + betaHA*Isa*Sh
CumR = (1-alpha)*(betaHH*Irh*Sh) + (1-alpha)*(betaHA*Ira*Sh)
return(list(c(dSa,dIsa,dIra,dSh,dIsh,dIrh), CumS, CumR))
})
}
#### Data Import ####
#Import Data
dataamp_pigs <- read.csv("Amp_FatPigs_Comb.csv")
dataamp_hum <- read.csv("Hum_FatPigs.csv")
#Cleaning Data - Animals
dataamp_pigs[,(2+5):(6+5)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the No. of pos isolates
dataamp_pigs[,(2+10):(6+10)][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for the prop of resistant isolates
dataamp_pigs[,2:6][dataamp_pigs[,2:6] < 10] <- NA #If N > 10, replace the particular country/year with NA for N
dataamp_pigs <- dataamp_pigs[!(is.na(dataamp_pigs$N_2015) & is.na(dataamp_pigs$N_2016) & is.na(dataamp_pigs$N_2017) &
is.na(dataamp_pigs$N_2018) & is.na(dataamp_pigs$N_2019)),]
pig_yrs <- sub("N_", "", grep("N_20",colnames(dataamp_pigs), value = TRUE)) #Find years of the EFSA and ESVAC data in the dataset
# NON-AGGREGATED - AMP PIGS  -------------------------------------------------------------
colnames(dataamp_pigs)[12:16] <- pig_yrs
#Create dataset where each row is a different observation.
melt_amp_pigs <- melt(dataamp_pigs, id.vars = "Country", measure.vars = pig_yrs)
melt_amp_pigs$usage <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(dataamp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
#Cleaning Data - Humans
#only include countries/years which are present in the resistance dataset
dataamp_hum <- dataamp_hum[dataamp_hum$Country %in% intersect(dataamp_hum$Country, dataamp_pigs$Country),]
colnames(dataamp_hum)[26:31] <- as.character(2014:2019)
dataamp_hum_melt <- melt(dataamp_hum, id.vars = "Country", measure.vars = pig_yrs)
colnames(dataamp_hum_melt)[c(2,3)] <- c("Year", "Resistance")
# Combine Human and Livestock Dataset -----------------------------------------------------------------
melt_amp_pigs$ResPropHum <- dataamp_hum_melt[,3] #Obtain the melted human resistances
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$Resistance),]
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$usage),] # Remove all rows with NAs for usage and resistance
#Add 95% CIs for each datapoint
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
#Rename the columns
colnames(melt_amp_pigs) <- c("Country", "Year", "ResPropAnim", "Usage", "N", "IsolPos", "ResPropHum", "Lower_Amp", "Upper_Amp")
melt_amp_pigs$Usage <- melt_amp_pigs$Usage/1000 #Change from mg/PCU to g/PCU
ggplot(melt_amp_pigs, aes(x = Usage, y= ResPropAnim, color = Country)) + geom_point() +
scale_x_continuous(expand = c(0, 0), limits = c(0,0.055)) + scale_y_continuous(expand = c(0, 0), limits = c(0,1)) +
labs(x ="Livestock Antibiotic Usage (g/PCU)", y = "Antibiotic-Resistant Livestock Carriage")
#Find the average EU antibiotic usage and average human resistance for model fitting
avg_EU_usage <- mean(melt_amp_pigs$Usage)
avg_hum_res <- mean(melt_amp_pigs$ResPropHum, na.rm = TRUE)
#### Approximate Bayesian Computation - Rejection Algorithm ####
#Obtain the Resistance
summarystatprev <- function(prev) {
return(prev$ResPropAnim)
}
#Return the sum of squares between resistance and the model output
sum_square_diff_dist <- function(sum.stats, data.obs, model.obs) {
sumsquare <- sapply(sum.stats, function(x) {
sumsquare <- (x(data.obs) - x(model.obs))^2
})
return(sum(sumsquare))
}
#Compute the distances for all 3 summary statistics - this section involves running the model
computeDistanceABC_ALEX <- function(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data) {
tauoutput <-data.frame(matrix(nrow = length(tau_range), ncol=4))
tau_range <- append(tau_range, avg_EU_usage)
for (i in 1:length(tau_range)) {
parms2 = thetaparm
parms2["tau"] = tau_range[i]
out <- runsteady(y = init.state, func = fitmodel, times = c(0, Inf), parms = parms2)
tauoutput[i,] <- c(tau_range[i],
((out[[2]] + out[[3]])*(446000000))/100000,
out[[1]][["Ira"]] / (out[[1]][["Isa"]] + out[[1]][["Ira"]]),
out[[1]][["Irh"]] / (out[[1]][["Ish"]] + out[[1]][["Irh"]]))
}
tauoutput <- data.frame(tauoutput)
colnames(tauoutput) <- c("tau", "IncH", "ResPropAnim", "ResPropHum")
return(c(distanceABC(list(sum.stats), data, tauoutput[!tauoutput$tau == avg_EU_usage,]),
abs(tauoutput$IncH[tauoutput$tau == avg_EU_usage] - 0.593),
abs(tauoutput$ResPropHum[tauoutput$tau == avg_EU_usage] - avg_hum_res)))
}
#Where G is the number of generations
#Function to 100% make sure the sampled particles for all parameters are non zero
prior.non.zero<-function(par){
prod(sapply(1:6, function(a) as.numeric((par[a]-lm.low[a]) > 0) * as.numeric((lm.upp[a]-par[a]) > 0)))
}
#Wrapper function for all of the functions to output the distance measures and the diagnostics
#Saving of the accepted particles in each generation done within the function
ABC_algorithm <- function(N, G, sum.stats, distanceABC, fitmodel, tau_range, init.state, data)  {
N_ITER_list <- list()
fit_parms <- c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA")
thetaparm <- c(ra = 60^-1, rh =  (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAH = 0.00001, betaHH = 0.00001)
for(g in 1:G) {
i <- 1
dist_data <- data.frame(matrix(nrow = 1000, ncol = 3))
N_ITER <- 1
while(i <= N) {
N_ITER <- N_ITER + 1
if(g==1) {
d_betaAA <- runif(1, min = 0, max = 2)
d_phi <- runif(1, min = 0, max = 1)
d_kappa <- runif(1, min = 0, max = 150)
d_alpha <- rbeta(1, 1.5, 8.5)
d_zeta <- runif(1, 0, 10)
d_betaHA <- runif(1, 0, 0.0005)
} else{
p <- sample(seq(1,N),1,prob= w.old) # check w.old here
par <- rtmvnorm(1,mean=res.old[p,], sigma=sigma, lower=lm.low, upper=lm.upp)
d_betaAA<-par[1]
d_phi<-par[2]
d_kappa<-par[3]
d_alpha<-par[4]
d_zeta <- par[5]
d_betaHA <-par[6]
}
if(prior.non.zero(c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA))) {
m <- 0
thetaparm <- c(ra = 60^-1, rh = (5.5^-1), ua = 240^-1, uh = 28835^-1, betaAA = d_betaAA, betaAH = 0.00001, betaHH = 0.00001,
betaHA = d_betaHA, phi = d_phi, kappa = d_kappa, alpha = d_alpha, zeta = d_zeta)
dist <- computeDistanceABC_ALEX(sum.stats, distanceABC, fitmodel, tau_range, thetaparm, init.state, data)
print(dist)
if((dist[1] <= epsilon_dist[g]) && (dist[2] <= epsilon_food[g]) && (dist[3] <= epsilon_AMR[g]) && (!is.na(dist))) {
# Store results
res.new[i,]<-c(d_betaAA, d_phi, d_kappa, d_alpha, d_zeta, d_betaHA)
dist_data[i,] <- dist
# Calculate weights
if(g==1){
w.new[i] <- 1
} else {
w1<-prod(c(sapply(c(1:3,5:6), function(b) dunif(res.new[i,b], min=lm.low[b], max=lm.upp[b])),
dbeta(res.new[i,4], 1.5, 8.5)))
w2<-sum(sapply(1:N, function(a) w.old[a]* dtmvnorm(res.new[i,], mean=res.old[a,], sigma=sigma, lower=lm.low, upper=lm.upp)))
w.new[i] <- w1/w2
}
# Update counter
print(paste0('Generation: ', g, ", particle: ", i,", weights: ", w.new[i]))
print(dist)
i <- i+1
}
}
}
N_ITER_list[[g]] <- list(N_ITER, dist_data)
sigma <- cov(res.new)
res.old <- res.new
print(res.old)
w.old <- w.new/sum(w.new)
colnames(res.new) <- c("betaAA", "phi", "kappa", "alpha", "zeta", "betaHA")
write.csv(res.new, file = paste("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/new/ABC_post_amppigs_",g,".csv",sep=""), row.names=FALSE)
}
return(N_ITER_list)
}
N <- 1000 #(ACCEPTED PARTICLES PER GENERATION)
lm.low <- c(0, 0, 0, 0, 0, 0)
lm.upp <- c(2, 1, 150, 1, 10, 0.0005) #Upper and lower bounds for the priors - for the multivariate normal dist pert kernel
# Empty matrices to store results (6 model parameters)
res.old<-matrix(ncol=6,nrow=N)
res.new<-matrix(ncol=6,nrow=N)
# Empty vectors to store weights
w.old<-matrix(ncol=1,nrow=N)
w.new<-matrix(ncol=1,nrow=N)
#Thresholds
epsilon_dist <- c(4, 3.5, 3, 2.5, 2, 1.8, 1.6, 1.55, 1.5, 1.475)
epsilon_food <- c(0.593*1, 0.593*0.8, 0.593*0.6, 0.593*0.4, 0.593*0.2, 0.593*0.1, 0.593*0.08, 0.593*0.07, 0.593*0.06, 0.593*0.05)
epsilon_AMR <- c(avg_hum_res*1, avg_hum_res*0.8, avg_hum_res*0.6, avg_hum_res*0.4, avg_hum_res*0.2, avg_hum_res*0.1, avg_hum_res*0.08, avg_hum_res*0.07, avg_hum_res*0.06, avg_hum_res*0.05)
#Run the model
start_time <- Sys.time()
dist_save <- ABC_algorithm(N = 1000,
G = 10,
sum.stats = summarystatprev,
distanceABC = sum_square_diff_dist,
fitmodel = amr,
tau_range = melt_amp_pigs$Usage,
init.state = c(Sa=0.98, Isa=0.01, Ira=0.01, Sh=1, Ish=0, Irh=0),
data = melt_amp_pigs)
end_time <- Sys.time(); end_time - start_time
saveRDS(dist_save, file = "dist_amppigs_list.rds")
post_dist_names <- grep("ABC_post_amppigs_",
list.files("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/new"), value = TRUE)
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/new")
post_dist <- lapply(post_dist_names, read.csv)
post_dist <- mapply(cbind, post_dist, "gen" = sapply(1:length(post_dist), function(x) paste0("gen_", x)),
SIMPLIFY=F)
post_dist <- do.call("rbind", post_dist)
maps_est <- map_estimate(post_dist[post_dist$gen == tail(unique(post_dist$gen),1),][,1:6])
p_list <- list()
for(i in 1:(length(post_dist)-1)) {
p_list[[i]] <- local ({
name_exp <- post_dist[,c(i,7)]
p <- ggplot(name_exp, aes(x= name_exp[,1], fill=gen)) + geom_density(alpha=.5) +
geom_vline(xintercept = maps_est[i,2], size = 1.2, col = "red") +
scale_x_continuous(expand = c(0, 0), name = colnames(post_dist)[-7][i]) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),axis.text=element_text(size=14),
axis.title.y=element_text(size=14),axis.title.x= element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"))
return(p)
})
}
p_list
