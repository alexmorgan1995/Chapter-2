setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- c(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
model_comp
list_vec <- 1:(nrow(model_comp[[1]])/1000)
list_vec
c(lapply(list_vec, function(x) rep(list_vec[1], 1000)))
lapply(list_vec, function(x) rep(list_vec[1], 1000))
list_vec <- 1:(nrow(model_comp[[1]])/1000)
list_vec
lapply(list_vec, function(x) rep(list_vec[x], 1000))
unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
model_comp[[1]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
model_comp[[1]]
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
model_comp[[1]]
model_comp[[2]]
model_comp
model_comp[[1]]
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
model_comp
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
model_comp
model <- model_comp[[1]]
model$dm[model$dm == 1]
model$d_m == 1
model[model$gen == 1]
model[model$gen == 1,]
model[model$gen == 1,][model$d_m == 1]
model[model$gen == 1,][model$d_m == 1,]
nrow(model[model$gen == 1,][model$d_m == 1,])
model_comp[[1]]
model[model$gen == 1,]
model[model$gen == 1,][model$d_m == 1,])
model[model$gen == 1,][model$d_m == 1,]
model$d_m[model$gen == 1]
?which
which(model$d_m[model$gen == 1] == 1)
nrow(which(model$d_m[model$gen == 1] == 1))
length(which(model$d_m[model$gen == 1] == 1))
sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000
sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
comb_list[[i]] <- data.frame("gen" = 1:length(unique(model$gen)),
"value" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000))
}
comb_list
ggplot(comb_list[[1]],
aes(x = gen, y = value)) + geom_bar(position = "fill", stat="identity")
comb_list[[1]]
ggplot(comb_list[[1]],
aes(x = gen, y = value)) + geom_bar()
ggplot(comb_list[[1]],
aes(x = gen, fill = value)) + geom_bar(position = "fill", stat="identity")
ggplot(comb_list[[1]],
aes(x = gen, y = value)) + geom_bar(position = "fill", stat="identity")
ggplot(comb_list[[1]],
aes(x = gen, y = value)) + geom_bar(stat="identity")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
comb_list[[i]] <- data.frame("gen" = 1:length(unique(model$gen)),
"value1" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000),
"value2" =   1-(sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)))
}
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
comb_list[[i]] <- data.frame("gen" = 1:length(unique(model$gen)),
"valuezeta" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000),
"value2nozeta" =   1-(sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)))
}
comb_list
model
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
data <- data.frame("gen" = 1:length(unique(model$gen)),
"zeta" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000),
"nozeta" =   1-(sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)))
comb_list <- melt(data, id.vars = "gen", measure.vars= c("zeta, nozeta"))
}
data
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
data_temp <- data.frame("gen" = 1:length(unique(model$gen)),
"zeta" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000),
"nozeta" =   1-(sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)))
comb_list <- melt(data_temp, id.vars = "gen", measure.vars= c("zeta, nozeta"))
}
data_temp
melt(data_temp, id.vars = "gen", measure.vars= c("zeta, nozeta"))
melt(data_temp, id.vars = c("zeta, nozeta"), measure.vars = "gen")
melt(data_temp, id.vars = "gen", measure.vars = c("zeta", "nozeta"))
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
comb_list <- list()
for(i in 1:4) {
model <- model_comp[[i]]
data_temp <- data.frame("gen" = 1:length(unique(model$gen)),
"zeta" =   sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000),
"nozeta" =   1-(sapply(1:length(unique(model$gen)), function(x) length(which(model$d_m[model$gen == x] == 1))/1000)))
comb_list <- melt(data_temp, id.vars = "gen", measure.vars = c("zeta", "nozeta"))
}
model_comp[[1]]
ggplot(model_comp[[1]],
aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill")
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
ggplot(model_comp[[1]],
aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[1]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_continuous(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_y_continuous(expand = c(0, 0), name = bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)")) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Ampicillin ")[i] ,
"usage in ", c("Broilers", "Broilers", "Pigs","Pigs")[i]))
}
plot_list
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[1]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_discrete(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_x_discrete(expand = c(0, 0), name = bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)")) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Ampicillin ")[i] ,
"usage in ", c("Broilers", "Broilers", "Pigs","Pigs")[i]))
}
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[1]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_discrete(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_y_continuous(expand = c(0, 0), name = bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)")) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Ampicillin ")[i] ,
"usage in ", c("Broilers", "Broilers", "Pigs","Pigs")[i]))
}
plot_list
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[i]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_discrete(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_y_continuous(expand = c(0, 0), name = bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)")) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Ampicillin ")[i] ,
"usage in ", c("Broilers", "Broilers", "Pigs","Pigs")[i]))
}
plot_list
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[i]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_discrete(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Ampicillin ")[i] ,
"Usage in ", c("Broilers", "Broilers", "Pigs","Pigs")[i]))
}
comb_plot <- ggarrange(plot_list[[1]],plot_list[[2]], plot_list[[3]],plot_list[[4]], common.legend = TRUE, legend = "bottom" ,
ncol = 1, nrow = 4)
comb_plot_annotate <- annotate_figure(comb_plot,
left = text_grob(bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)"), color = "black", rot = 90, size = 14))
comb_plot_annotate
library("deSolve"); library("ggplot2"); library("plotly"); library("reshape2")
library("bayestestR"); library("tmvtnorm"); library("ggpubr")
rm(list=ls())
setwd("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/models/Analyses/Zeta_vs_nozeta/output")
#do.call works by exceuting a function and a list of arguenments passed to it
#lapply works by returning a list of all of the executed functions given a bunch of arguements passed to it
comp_list <- lapply(1:4, function(x) list.files(pattern = paste0("COMPARE_ABC_post_",c("ampbroil", "tetbroil", "amppigs", "tetpigs")[x])))
model_comp <-  lapply(1:4, function(x) do.call(rbind, lapply(comp_list[[x]], read.csv)))
for(i in 1:4) {
list_vec <- 1:(nrow(model_comp[[i]])/1000)
model_comp[[i]]$gen <- unlist(lapply(list_vec, function(x) rep(list_vec[x], 1000)))
}
plot_list <- list()
for(i in 1:4) {
plot_list[[i]] <- ggplot(model_comp[[i]], aes(x = factor(gen), fill = factor(d_m))) + geom_bar(position = "fill") + theme_bw() +
scale_x_discrete(expand = c(0, 0), name = expression(paste("Generation"))) +
scale_y_continuous(expand = c(0, 0)) +
theme(legend.text=element_text(size=14),  axis.text = element_text(size=14),
axis.title.y=element_blank(), axis.title.x = element_text(size=14), plot.margin = unit(c(0.5,0.5,0.5,0.5), "cm"),
legend.title=element_text(size=14), title= element_text(size= 15)) +
scale_fill_manual(values = c("black","grey"),name = "Model", labels = c("1 (Zeta)", "2 (No Zeta)")) +
labs(title = paste0(c("Ampicillin ", "Tetracycline ", "Ampicillin ", "Tetracycline ")[i] ,
"Usage in ", c("Broiler Poultry", "Broiler Poultry", "Fattening Pigs","Fattening Pigs")[i]))
}
comb_plot <- ggarrange(plot_list[[1]],plot_list[[2]], plot_list[[3]],plot_list[[4]], common.legend = TRUE, legend = "bottom" ,
ncol = 1, nrow = 4)
comb_plot_annotate <- annotate_figure(comb_plot,
left = text_grob(bquote("Proportion of " ~ italic(m) ~ "particles accepted (n = 1000)"), color = "black", rot = 90, size = 14))
ggsave(comb_plot_annotate, filename = paste0("compare_plot_supp.png"), path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Figures/comb_data",
dpi = 300, type = "cairo", width = 10, height = 10, units = "in")
library(reshape2); library(ggplot2); library(ggpubr); library(betareg)
rm(list=ls())
# Import and Clean Data - Broilers (Ampicillin and Tetracycline) -----------
# Ampicillin Resistance
amp_broil <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/Amp_Broil_Years.csv")
amp_broil[,(2+4):(5+4)][amp_broil[,2:5] < 10] <- NA # replace anything under a sample size of 10 with
amp_broil[,2:5][amp_broil[,2:5] < 10] <- NA # replace anything under a sample size of 10 with
amp_broil <- amp_broil[!(is.na(amp_broil$N_2014) & is.na(amp_broil$N_2016) & is.na(amp_broil$N_2017) &
is.na(amp_broil$N_2018)),]
colnames(amp_broil)[10:13] <- as.character(c(2014, 2016, 2017, 2018))
# Tetracycline Resistance
tet_broil <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/Tet_Broil_Years.csv")
tet_broil[,(2+4):(5+4)][tet_broil[,2:5] < 10] <- NA # replace anything under a sample size of 10 with
tet_broil[,2:5][tet_broil[,2:5] < 10] <- NA # replace anything under a sample size of 10 with
tet_broil <- tet_broil[!(is.na(tet_broil$N_2014) & is.na(tet_broil$N_2016) & is.na(tet_broil$N_2017) &
is.na(tet_broil$N_2018)),]
colnames(tet_broil)[10:13] <- as.character(c(2014, 2016, 2017, 2018))
#Check that we have the same countries for tetracycline and ampicillin usage
tet_broil$Country %in% amp_broil$Country
#Broiler Usage
usage_broil <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/broil_usage_years.csv")
usage_broil <- usage_broil[usage_broil$Country %in% intersect(usage_broil$Country, amp_broil$Country),]
# Import and Clean Data - Fattening Pigs (Ampicillin and Tetracycline) -----------
# Ampicillin Resistance
amp_pigs <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/Amp_FatPigs_Years.csv")
amp_pigs[,(2+5):(6+5)][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs[,(2+10):(6+10)][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs[,2:6][amp_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
amp_pigs <- amp_pigs[!(is.na(amp_pigs$N_2015) & is.na(amp_pigs$N_2016) & is.na(amp_pigs$N_2017) &
is.na(amp_pigs$N_2018) & is.na(amp_pigs$N_2019)),]
colnames(amp_pigs)[12:16] <- as.character(seq(2015, 2019))
# Tetracycline Resistance
tet_pigs <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/Tet_FatPigs_Years.csv")
tet_pigs[,(2+5):(6+5)][tet_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
tet_pigs[,(2+10):(6+10)][tet_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
tet_pigs[,2:6][tet_pigs[,2:6] < 10] <- NA # replace anything under a sample size of 10 with
tet_pigs <- tet_pigs[!(is.na(tet_pigs$N_2015) & is.na(tet_pigs$N_2016) & is.na(tet_pigs$N_2017) &
is.na(tet_pigs$N_2018) & is.na(tet_pigs$N_2019)),]
colnames(tet_pigs)[12:16] <- as.character(seq(2015, 2019))
#Check that we have the same countries for tetracycline and ampicillin usage
tet_pigs$Country %in% amp_pigs$Country
#Broiler Usage
usage_pigs <- read.csv("//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Models/Chapter-2/NewFits_041021/data/puredata/pig_usage_years.csv")
usage_pigs <- usage_pigs[usage_pigs$Country %in% intersect(usage_pigs$Country, tet_pigs$Country),]
# Create the non-Aggregated Plots  -------------------------------------------------------------
#Create the Combined Dataset - Amp Fattening Pigs
melt_amp_pigs <- melt(amp_pigs, id.vars = "Country", measure.vars = c("2015", "2016", "2017", "2018", "2019"))
melt_amp_pigs$usage <- melt(usage_pigs, id.vars = "Country", measure.vars = c("scale_ampusage_2015", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018", "scale_ampusage_2019"))[,3]
melt_amp_pigs$N <- melt(amp_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_amp_pigs$IsolPos <- melt(amp_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_amp_pigs)[c(2,3)] <- c("Year", "Resistance")
melt_amp_pigs <- melt_amp_pigs[!is.na(melt_amp_pigs$N),]
melt_amp_pigs$lower_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[1]]))
melt_amp_pigs$upper_amp <- unlist(lapply(1:nrow(melt_amp_pigs), function(i) prop.test(melt_amp_pigs$IsolPos[i],melt_amp_pigs$N[i])[[6]][[2]]))
p_amp_pigs <- ggplot(melt_amp_pigs, aes(usage, Resistance, color = Country)) + geom_point() +
geom_errorbar(aes(ymin=lower_amp, ymax=upper_amp), size=0.5, width = 0) + theme_bw()  + theme(legend.position =  "bottom", plot.title = element_text(face = "bold")) +
labs(title = "Ampicillin Usage in Fattening Pigs: 2015-2018", x = "Ampicillin Fattening Pig Sales (mg/PCU)", y = "Proportion Fattening Pigs Resistant")+
scale_y_continuous(expand = c(0,0))  +  scale_x_continuous(expand = c(0,0.3))+
geom_smooth(method=lm , color="red", fill="hotpink", se=TRUE) + coord_cartesian(ylim=c(0,1.1))
#Create the Combined Dataset - Tet Fattening Pigs
melt_tet_pigs <- melt(tet_pigs, id.vars = "Country", measure.vars = c("2015", "2016", "2017", "2018", "2019"))
melt_tet_pigs$usage <- melt(usage_pigs, id.vars = "Country", measure.vars = c("scale_tetusage_2015", "scale_tetusage_2016",
"scale_tetusage_2017", "scale_tetusage_2018", "scale_tetusage_2019"))[,3]
melt_tet_pigs$N <- melt(tet_pigs, id.vars = "Country", measure.vars = c("N_2015", "N_2016",
"N_2017", "N_2018", "N_2019"))[,3]
melt_tet_pigs$IsolPos <- melt(tet_pigs, id.vars = "Country", measure.vars = c("PosIsol_2015", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018", "PosIsol_2019"))[,3]
colnames(melt_tet_pigs)[c(2,3)] <- c("Year", "Resistance")
melt_tet_pigs <- melt_tet_pigs[!is.na(melt_tet_pigs$N),]
melt_tet_pigs$lower_tet <- unlist(lapply(1:nrow(melt_tet_pigs), function(i) prop.test(melt_tet_pigs$IsolPos[i],melt_tet_pigs$N[i])[[6]][[1]]))
melt_tet_pigs$upper_tet <- unlist(lapply(1:nrow(melt_tet_pigs), function(i) prop.test(melt_tet_pigs$IsolPos[i],melt_tet_pigs$N[i])[[6]][[2]]))
p_tet_pigs <- ggplot(melt_tet_pigs, aes(usage, Resistance, color = Country)) + geom_point() +
geom_errorbar(aes(ymin=lower_tet, ymax=upper_tet), size=0.5, width = 0) + theme_bw()  + theme(legend.position =  "bottom", plot.title = element_text(face = "bold")) +
labs(title = "Tetracycline Usage in Fattening Pigs: 2015-2018", x = "Tetracycline Fattening Pig Sales (mg/PCU)", y = "Proportion Fattening Pigs Resistant")+
scale_y_continuous(expand = c(0,0))  +  scale_x_continuous(expand = c(0,0.3))+
geom_smooth(method=lm , color="red", fill="hotpink", se=TRUE) + coord_cartesian(ylim=c(0,1.1))
#Create the Combined Dataset - Amp Broilers
melt_amp_broil <- melt(amp_broil, id.vars = "Country", measure.vars = c("2014", "2016", "2017", "2018"))
melt_amp_broil$usage <- melt(usage_broil, id.vars = "Country", measure.vars = c("scale_ampusage_2014", "scale_ampusage_2016",
"scale_ampusage_2017", "scale_ampusage_2018"))[,3]
melt_amp_broil$N <- melt(amp_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016", "N_2017", "N_2018"))[,3]
melt_amp_broil$IsolPos <- melt(amp_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_amp_broil)[c(2,3)] <- c("Year", "Resistance")
melt_amp_broil <- melt_amp_broil[!is.na(melt_amp_broil$N),]
melt_amp_broil$lower_amp <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[1]]))
melt_amp_broil$upper_amp <- unlist(lapply(1:nrow(melt_amp_broil), function(i) prop.test(melt_amp_broil$IsolPos[i],melt_amp_broil$N[i])[[6]][[2]]))
p_amp_broil <- ggplot(melt_amp_broil, aes(usage, Resistance, color = Country)) + geom_point() +
geom_errorbar(aes(ymin=lower_amp, ymax=upper_amp), size=0.5, width = 0) + theme_bw() + theme(legend.position =  "bottom", plot.title = element_text(face = "bold")) +
labs(title = "Ampicillin Usage in Broilers: 2014-2018", x = "Ampicillin Broiler Sales (mg/PCU)", y = "Proportion Broilers Resistant")+
scale_y_continuous(expand = c(0,0))  +  scale_x_continuous(expand = c(0,0.3))+
geom_smooth(method=lm , color="red", fill="hotpink", se=TRUE)  + coord_cartesian(ylim=c(0,1.1))
#Create the Combined Dataset - Tet Broilers
melt_tet_broil <- melt(tet_broil, id.vars = "Country", measure.vars = c("2014", "2016", "2017", "2018"))
melt_tet_broil$usage <- melt(usage_broil, id.vars = "Country", measure.vars = c("scale_tetusage_2014", "scale_tetusage_2016",
"scale_tetusage_2017", "scale_tetusage_2018"))[,3]
melt_tet_broil$N <- melt(tet_broil, id.vars = "Country", measure.vars = c("N_2014", "N_2016", "N_2017", "N_2018"))[,3]
melt_tet_broil$IsolPos <- melt(tet_broil, id.vars = "Country", measure.vars = c("PosIsol_2014", "PosIsol_2016",
"PosIsol_2017", "PosIsol_2018"))[,3]
colnames(melt_tet_broil)[c(2,3)] <- c("Year", "Resistance")
melt_tet_broil <- melt_tet_broil[!is.na(melt_tet_broil$N),]
melt_tet_broil$lower_tet <- unlist(lapply(1:nrow(melt_tet_broil), function(i) prop.test(melt_tet_broil$IsolPos[i],melt_tet_broil$N[i])[[6]][[1]]))
melt_tet_broil$upper_tet <- unlist(lapply(1:nrow(melt_tet_broil), function(i) prop.test(melt_tet_broil$IsolPos[i],melt_tet_broil$N[i])[[6]][[2]]))
p_tet_broil <- ggplot(melt_tet_broil, aes(usage, Resistance, color = Country)) + geom_point() +
geom_errorbar(aes(ymin=lower_tet, ymax=upper_tet), size=0.5, width = 0) + theme_bw()  + theme(legend.position =  "bottom", plot.title = element_text(face = "bold")) +
labs(title = "Tetracycline Usage in Broilers: 2014-2018", x = "Tetracycline Broiler Sales (mg/PCU)", y = "Proportion Broilers Resistant") +
scale_y_continuous(expand = c(0,0)) +  scale_x_continuous(expand = c(0,0.3)) +
geom_smooth(method=lm , color="red", fill="hotpink", se=TRUE)
# Statistically Testing the non-agrgegated Data  -----------------------------------------
stat_amp_pigs <- lm(Resistance ~ usage, melt_amp_pigs); summary(stat_amp_pigs)
stat_tet_pigs <- lm(Resistance ~ usage, melt_tet_pigs); summary(stat_tet_pigs)
stat_amp_broil <- lm(Resistance ~ usage, melt_amp_broil); summary(stat_amp_broil)
stat_tet_broil <- lm(Resistance ~ usage, melt_tet_broil); summary(stat_tet_broil)
comb_nonaggre_plot <- ggarrange(p_tet_pigs, p_amp_pigs, p_tet_broil, p_amp_broil, ncol = 2,  nrow = 2, common.legend = TRUE,
legend = "bottom")
comb_nonaggre_plot
comb_nonaggre_plot <- ggarrange(p_amp_broil,p_tet_broil, p_amp_pigs, p_tet_pigs, labels = c("A","B","C","D"),ncol = 2,  nrow = 2, common.legend = TRUE,
legend = "bottom")
comb_nonaggre_plot
stat_amp_pigs <- lm(Resistance ~ usage, melt_amp_pigs); summary(stat_amp_pigs)
stat_tet_pigs <- lm(Resistance ~ usage, melt_tet_pigs); summary(stat_tet_pigs)
stat_amp_broil <- lm(Resistance ~ usage, melt_amp_broil); summary(stat_amp_broil)
stat_tet_broil <- lm(Resistance ~ usage, melt_tet_broil); summary(stat_tet_broil)
comb_nonaggre_plot <- ggarrange(p_amp_broil,p_tet_broil, p_amp_pigs, p_tet_pigs, labels = c("A","B","C","D"),ncol = 2,  nrow = 2, common.legend = TRUE,
legend = "bottom")
ggsave(comb_nonaggre_plot, filename = "nonaggreg_stat.png", dpi = 300, type = "cairo", width = 11, height = 10, units = "in",
path = "//csce.datastore.ed.ac.uk/csce/biology/users/s1678248/PhD/Chapter_2/Figures/comb_data")
melt_amp_pigs
mean(melt_amp_pigs$usage)
mean(melt_amp_pigs$usage, na.rm = TRUE)
mean(melt_amp_pigs$usage, na.rm = TRUE)/1000
mean(melt_tet_pigs$usage, na.rm = TRUE)/1000
mean(melt_tet_broil$usage, na.rm = TRUE)/1000
mean(melt_amp_broil$usage, na.rm = TRUE)/1000
